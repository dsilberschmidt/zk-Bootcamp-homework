import { Bool } from '../../core.js';
import { UInt64 } from '../../int.js';
import { PublicKey } from '../../signature.js';
import { AccountUpdate, AccountUpdateForest, AccountUpdateTree } from '../../account-update.js';
import { DeployArgs, SmartContract } from '../../zkapp.js';
export { TokenContract };
/**
 * Base token contract which
 * - implements the `Approvable` API, with the `approveBase()` method left to be defined by subclasses
 * - implements the `Transferable` API as a wrapper around the `Approvable` API
 */
declare abstract class TokenContract extends SmartContract {
    deploy(args?: DeployArgs): void;
    abstract approveBase(forest: AccountUpdateForest): void;
    /**
     * Iterate through the account updates in `updates` and apply `callback` to each.
     *
     * This method is provable and is suitable as a base for implementing `approveUpdates()`.
     */
    forEachUpdate(updates: AccountUpdateForest, callback: (update: AccountUpdate, usesToken: Bool) => void): void;
    /**
     * Use `forEachUpdate()` to prove that the total balance change of child account updates is zero.
     *
     * This is provided out of the box as it is both a good example, and probably the most common implementation, of `approveBase()`.
     */
    checkZeroBalanceChange(updates: AccountUpdateForest): void;
    /**
     * Approve a single account update (with arbitrarily many children).
     */
    approveAccountUpdate(accountUpdate: AccountUpdate | AccountUpdateTree): void;
    /**
     * Approve a list of account updates (with arbitrarily many children).
     */
    approveAccountUpdates(accountUpdates: (AccountUpdate | AccountUpdateTree)[]): void;
    /**
     * Transfer `amount` of tokens from `from` to `to`.
     */
    transfer(from: PublicKey | AccountUpdate, to: PublicKey | AccountUpdate, amount: UInt64 | number | bigint): void;
}
