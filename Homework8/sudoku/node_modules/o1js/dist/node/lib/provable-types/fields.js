import { Field } from '../field.js';
export { modifiedField, fields };
const zero = new Field(0);
// provable for a single field element
const ProvableField = {
    sizeInFields: () => 1,
    toFields: (x) => [x],
    toAuxiliary: () => [],
    fromFields: ([x]) => x,
    check: () => { },
    toInput: (x) => ({ fields: [x] }),
    toJSON: Field.toJSON,
    fromJSON: Field.fromJSON,
    empty: () => zero,
};
function modifiedField(methods) {
    return Object.assign({}, ProvableField, methods);
}
// provable for a fixed-size array of field elements
let id = (t) => t;
function fields(length) {
    return {
        sizeInFields: () => length,
        toFields: id,
        toAuxiliary: () => [],
        fromFields: id,
        check: () => { },
        toInput: (x) => ({ fields: x }),
        toJSON: (x) => x.map(Field.toJSON),
        fromJSON: (x) => x.map(Field.fromJSON),
        empty: () => new Array(length).fill(zero),
    };
}
//# sourceMappingURL=fields.js.map